<!--
***********************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright Eugene Sadovoi (C) 
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  ///////////////////////////////////////////////////////////
  // UI Configuration
  ///////////////////////////////////////////////////////////-->
  <ItemGroup>
    <PropertyPageSchema Include="$(ProjectDir)boost.xml" >
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(ProjectDir)cxxflags.xml" />
    <PropertyPageSchema Include="$(ProjectDir)linkflags.xml" />
  </ItemGroup>

  
  <!--
  ///////////////////////////////////////////////////////////
  // Defaults
  ///////////////////////////////////////////////////////////-->
  <PropertyGroup>
    <BoostRoot Condition="'$(BoostDir)'!=''">$([System.IO.Path]::GetFullPath("$(BoostDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BoostRoot>
    <OutputDir>$([System.IO.Path]::GetFullPath("$(OutDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</OutputDir>
    <BuildDir>$([System.IO.Path]::GetFullPath("$(IntDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BuildDir>
  </PropertyGroup>

  <ItemGroup Label="Dirs to clear">
    <BoostFolders Include="$(BuildDir)\boost" />
    <BoostFolders Include="$(OutputDir)\include" />
    <BoostFolders Include="$(OutputDir)\lib" />
    <BoostFolders Include="$(OutputDir)\bin" />
  </ItemGroup>

  <ItemGroup Label="Engine source files">
    <EngineSourceFiles Include="$(BoostRoot)\tools\build\src\engine\*.h" />
    <EngineSourceFiles Include="$(BoostRoot)\tools\build\src\engine\*.c" />
  </ItemGroup>


  <!--
  ///////////////////////////////////////////////////////////
  // Get Configuration
  ///////////////////////////////////////////////////////////-->
  <Target Name="ConfigHelper" Returns="$(return-options)" >

    <PropertyGroup>
      <Quote Condition="'$(Context)'!='Project'">&#39;</Quote>
      <TempFile>$([System.IO.Path]::GetTempFileName())</TempFile>
    </PropertyGroup>

    <XmlPeek Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/build/2009/properties'/&gt;"
             XmlInputPath="$(PropertyPageSchema)" Query="/ns:Rule/*[not(contains(@IncludeInCommandLine, 'false')) and contains(local-name(), 'Property')]|
                             /ns:ProjectSchemaDefinitions/ns:Rule/*[not(contains(@IncludeInCommandLine, 'false')) and contains(local-name(), 'Property')]">
      <Output TaskParameter="Result" ItemName="Peeked" />
    </XmlPeek>

    <ItemGroup Label="Parse XML">
      <Properties Include="$([System.Text.RegularExpressions.Regex]::Match(%(Peeked.Identity), (?&lt;=\sName=&#34;)(.*?)(?=&#34;)))">
        <Subtype>$([System.Text.RegularExpressions.Regex]::Match(%(Peeked.Identity), (?&lt;=\sSubtype=")(.*?)(?=")))</Subtype>
      </Properties>
    </ItemGroup>

    <ItemGroup>
      <data-name-map Include="$(%(Properties.Identity))"
                     Condition="'%(Properties.Identity)'   !='' And '%(%(Properties.Identity))'!='' And '%(Properties.Subtype)' !='file' And '%(Properties.Subtype)' !='folder'" >
        <Name>%(Properties.Identity)</Name>  
      </data-name-map>
      <data-files-map Include="$(%(Properties.Identity))"
                      Condition="'%(Properties.Identity)' !='' And '%(%(Properties.Identity))'!='' And '%(Properties.Subtype)'    =='file'" >
        <Name>%(Properties.Identity)</Name>
      </data-files-map>
      <data-folders-map Include="$(%(Properties.Identity))"
                        Condition="'%(Properties.Identity)'   !='' And '%(%(Properties.Identity))'!='' And '%(Properties.Subtype)'    =='folder'" >
        <Name>%(Properties.Identity)</Name>
      </data-folders-map>
      
      <temp-data Condition="'%(data-name-map.Identity)'   !=''" Include="&lt;Property Name=&#34;%(data-name-map.Name)&#34;   &gt;%(data-name-map.Identity)&lt;/Property&gt;"/>
      <temp-data Condition="'%(data-files-map.Identity)'  !=''" Include="&lt;Property Name=&#34;%(data-files-map.Name)&#34;  &gt;$([System.IO.Path]::GetFullPath('%(data-files-map.Identity)'))&lt;/Property&gt;"/>
      <temp-data Condition="'%(data-folders-map.Identity)'!=''" Include="&lt;Property Name=&#34;%(data-folders-map.Name)&#34;&gt;$([System.IO.Path]::GetFullPath('%(data-folders-map.Identity)').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))&lt;/Property&gt;"/>
    
  </ItemGroup>
    <PropertyGroup Condition="'@(temp-data)'!=''">
      <xsl-raw>
        <!--?xml version="1.0" encoding="utf-8"?-->
        <xsl:stylesheet version="1.0" 
                        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:msb="http://schemas.microsoft.com/build/2009/properties"
                        xmlns:msxsl="urn:schemas-microsoft-com:xslt" >
          <xsl:output method="text" indent="no"/>
          <xsl:strip-space elements="*" />
          <xsl:param name="Quote" select="'&#34;'" />
          <xsl:param name="SmartQuotes" select="'true'" />
          <xsl:variable name="Data" >@(temp-data, '')</xsl:variable>
          <xsl:template match="/">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:ProjectSchemaDefinitions">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:Rule">
            <xsl:variable name="DataSet" select="msxsl:node-set($Data)" />
            <xsl:apply-templates select="*[not(@IncludeInCommandLine ='false') and @Name = $DataSet/*/@Name]"  >
              <xsl:with-param name="DefaultSwitchPrefix" select="@SwitchPrefix" />
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringProperty|msb:DynamicEnumProperty|msb:IntProperty|msb:Argument|msb:EnumProperty" >
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:if test="local-name() != 'Argument'">
              <xsl:text>&#32;</xsl:text>
              <xsl:choose>
                <xsl:when test="@SwitchPrefix">
                  <xsl:value-of select="@SwitchPrefix"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$DefaultSwitchPrefix"/>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:value-of select="@Switch"/>
            </xsl:if>
            <xsl:variable name="PropertyName">
              <xsl:choose>
                <xsl:when test="local-name() = 'Argument'" >
                  <xsl:value-of  select="self::node()/@Property" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of  select="self::node()//@Name" />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="QuoteSym" >
              <xsl:if test="(@Separator != '' and contains($Value, @Separator)) or contains($Value, ' ') or $SmartQuotes = 'false'">
                <xsl:value-of select="$Quote" />
              </xsl:if>
            </xsl:variable>
            <xsl:value-of select="@Separator"/>
            <xsl:choose>
              <xsl:when test="local-name() = 'EnumProperty'">
                <xsl:variable name="EnumValName" select="$DataSet/*[@Name = $PropertyName]/text()"/>
                <xsl:variable name="EnumVal" select="self::node()/*[@Name = $EnumValName]" />
                <xsl:value-of select="$EnumVal/@Switch"/>
                <xsl:apply-templates select="$EnumVal/*" >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$QuoteSym" />
                <xsl:value-of select="$Value"/>
                <xsl:value-of select="$QuoteSym" />
                <xsl:apply-templates >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
          <xsl:template match="msb:EnumValue">
            <xsl:param name="DataSet" />
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:BoolProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()/@Name" />
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:text>&#32;</xsl:text>
            <xsl:choose>
              <xsl:when test="@SwitchPrefix">
                <xsl:value-of select="@SwitchPrefix"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$DefaultSwitchPrefix"/>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="$Value = 'true'">
                <xsl:value-of select="@Switch"/>
              </xsl:when>
              <xsl:when test="$Value = 'false'">
                <xsl:value-of select="@ReverseSwitch"/>
              </xsl:when>
            </xsl:choose>
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringListProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()//@Name" />
            <xsl:variable name="Values"       select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="List"         select="self::node()" />
            <xsl:choose>
              <xsl:when test="@CommandLineValueSeparator != ''">
                <xsl:text>&#32;</xsl:text>
                <xsl:choose>
                  <xsl:when test="@SwitchPrefix">
                    <xsl:value-of select="@SwitchPrefix"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$DefaultSwitchPrefix"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select="@Switch" />
                <xsl:value-of select="@Separator" />
                <xsl:text>&#34;</xsl:text>
                <xsl:for-each select="$Values">
                  <xsl:value-of select="self::node()"/>
                  <xsl:if test="position() != last()">
                    <xsl:value-of select="$List/@CommandLineValueSeparator"/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:text>&#34;</xsl:text>
                <xsl:apply-templates>
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$Values">
                  <xsl:variable name="Value" select="." />
                  <xsl:variable name="QuoteSym" >
                    <xsl:if test="($List/@Separator != '' and contains($Value, $List/@Separator)) or contains($Value, ' ') or ($SmartQuotes = 'false')">
                      <xsl:value-of select="$Quote" />
                    </xsl:if>
                  </xsl:variable>
                  <xsl:text>&#32;</xsl:text>
                  <xsl:choose>
                    <xsl:when test="@SwitchPrefix">
                      <xsl:value-of select="@SwitchPrefix"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$DefaultSwitchPrefix"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:value-of select="$List/@Switch" />
                  <xsl:value-of select="$List/@Separator" />
                  <xsl:value-of select="$QuoteSym" />
                  <xsl:value-of select="$Value"/>
                  <xsl:value-of select="$QuoteSym" />
                  <xsl:apply-templates select="$List/*" >
                    <xsl:with-param name="DataSet" select="$DataSet" />
                  </xsl:apply-templates>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
        </xsl:stylesheet>
      </xsl-raw>
    </PropertyGroup>
    
    <XslTransformation Condition="'@(temp-data)'!=''" 
                       XmlInputPaths="$(PropertyPageSchema)" XslContent="$(xsl-raw)" OutputPaths="$(TempFile)"
                       Parameters="&lt;Parameter Name=&#34;SmartQuotes&#34; Value=&#34;$(SmartQuotes)&#34; /&gt;
                                   &lt;Parameter Name=&#34;Quote&#34; Value=&#34;$(Quote)&#34; /&gt;" />
    <ReadLinesFromFile Condition="'@(temp-data)'!=''" File="$(TempFile)">
      <Output TaskParameter="Lines" PropertyName="options" />
    </ReadLinesFromFile>
  
    <PropertyGroup Condition="'$(options)'!=''">
      <return-options Condition="'$(Context)'=='Project'">$(options)</return-options>
      <return-options Condition="'$(Context)'!='Project'">$([System.IO.Path]::GetFileNameWithoutExtension($(PropertyPageSchema)))=&#34;$(options)&#34;</return-options>
    </PropertyGroup>
  
    <Delete Condition="'@(temp-data)'!=''" Files="$(TempFile)" />
  
  </Target>

   
  <!--
  ///////////////////////////////////////////////////////////
  // Prepare command line options for build command
  ///////////////////////////////////////////////////////////-->
  <Target Name="PrepareForBoostBuild" Returns="@(boost-options)" >
    <Error Condition="'$(BoostRoot)'==''"              Text="Boost Library not found."                                               ContinueOnError="false" />
    <Error Condition="!Exists('$(BoostRoot)\Jamroot')" Text="Boost library is missing. Did you set BOOST_ROOT environment variable?" ContinueOnError="false" />

    <ItemGroup Label="Build Settings">
      <boost-options Condition="'$(PlatformToolset)'  ==''" Include="toolset=msvc" />
      <boost-options Condition="'$(PlatformToolset)'  !=''" Include="$([System.String]::Format('toolset=msvc-{0}.{1}', $(PlatformToolset.Substring(1, 2)), $(PlatformToolset.Substring(3,1))))" />
      <boost-options Condition="'$(BuildDir)'!=''"                                       Include="--build-dir=&#34;$(BuildDir)&#34;" />
      <boost-options Condition="'$(OutputDir)'!=''"                                      Include="--stagedir=&#34;$(OutputDir)&#34;" />
      <boost-options Condition="'$(OutputDir)'!='' And '$(BoostDeployment)'=='Install'"  Include="--prefix=&#34;$(OutputDir)&#34;" />
    </ItemGroup>
    
    <MSBuild Targets="ConfigHelper" Projects="$(MSBuildProjectFullPath)" BuildInParallel="true"
             Properties="PropertyPageSchema=%(PropertyPageSchema.Identity);Context=%(PropertyPageSchema.Context)" >
      <Output ItemName="boost-options" TaskParameter="TargetOutputs"/>
    </MSBuild>
    
    <ItemGroup Label="Build Settings">
      <boost-options Condition="'$(AdditionalOptions)'!=''" Include="$(AdditionalOptions)" />
    </ItemGroup>
  </Target>
  

  <!--
  ///////////////////////////////////////////////////////////
  // Build Jamfile Build Tool "B2.EXE"
  ///////////////////////////////////////////////////////////-->
  <Target Name="BuildJamTool" Label="Building BJAM engine"
          Inputs="@(EngineSourceFiles)" Outputs="$(BoostRoot)\b2.exe" >
    <Error ContinueOnError="false" Text="Engine source files are missing, did you update submodules?" Condition="@(EngineSourceFiles)==''" />
    
    <Message Text="Building Engine..." Importance="normal" />
    <Exec Command="call build.bat" WorkingDirectory="$(BoostRoot)\tools\build\src\engine\" EnvironmentVariables="VS_UNICODE_OUTPUT=" />
    
    <ItemGroup Label="List and copy all built exe files" >
      <BJamTools Include="$(BoostRoot)\tools\build\src\engine\bin.ntx86\*.exe" Condition="Exists('$(BoostRoot)\tools\build\src\engine\bin.ntx86')" />
      <BJamTools Include="$(BoostRoot)\tools\build\src\engine\bin.ntx86_64\*.exe" Condition="Exists('$(BoostRoot)\tools\build\src\engine\bin.ntx86_64')" />
    </ItemGroup>
    <Copy SourceFiles="@(BJamTools)" DestinationFolder="$(BoostRoot)\" UseHardlinksIfPossible="true" />
  </Target>

  
  <!--
  ///////////////////////////////////////////////////////////
  // Rebuild Boost Includes
  ///////////////////////////////////////////////////////////-->
  <Target Name="BoostHeaders"  Condition="!Exists('$(BoostRoot)\boost')" DependsOnTargets="BuildJamTool;" >
    <Exec Command="b2.exe toolset=msvc headers --build-dir=&#34;$(BuildDir)&#34; --stagedir=&#34;$(OutputDir)&#34;" WorkingDirectory="$(BoostRoot)\" EnvironmentVariables="VS_UNICODE_OUTPUT=" />
  </Target>

    
  <!--
  ///////////////////////////////////////////////////////////
  // BUILD TARGET
  /////////////////////////////////////////////////////////// -->
  <Target Name="Build" DependsOnTargets="PrepareForBoostBuild;BuildJamTool;BoostHeaders;" >
    <Message Text="Building..." Importance="normal" />
    <Exec Command="b2.exe @(boost-options, ' ')"       WorkingDirectory="$(BoostRoot)\"  EnvironmentVariables="VS_UNICODE_OUTPUT=" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // REBUILD TARGET
  /////////////////////////////////////////////////////////// -->
  <Target Name="Rebuild" DependsOnTargets="PrepareForBoostBuild;BuildJamTool;BoostHeaders;">
    <Message Text="Rebuilding..." Importance="normal" />
    <Exec Command="b2.exe @(boost-options, ' ') -a"    WorkingDirectory="$(BoostRoot)\"  EnvironmentVariables="VS_UNICODE_OUTPUT=" />
  </Target>


  <!--
    ///////////////////////////////////////////////////////////
    // CLEAN TARGET
    /////////////////////////////////////////////////////////// -->
  <Target Name="Clean" >
    <Message Text="Cleaning..." Importance="normal" />
    <RemoveDir Directories="@(BoostFolders)"   ContinueOnError="true"  />
  </Target>

 
</Project>