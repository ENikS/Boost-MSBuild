<!--
***********************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright Eugene Sadovoi (C) 
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
  ///////////////////////////////////////////////////////////
  // UI Configuration
  ///////////////////////////////////////////////////////////-->
  <ItemGroup>
    <PropertyPageSchema Include="$(ProjectDir)boost.xml" >
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(ProjectDir)cxxflags.xml" />
    <PropertyPageSchema Include="$(ProjectDir)linkflags.xml" />
    <BoostOutputs       Include="$(OutputDir)\lib\*" />
    <BoostOutputs       Include="'Dummy'"  Condition="'@(BoostOutputs)'==''">
      <Delete>true</Delete>
    </BoostOutputs>
  </ItemGroup>

  
  <!--
  ///////////////////////////////////////////////////////////
  // Defaults
  ///////////////////////////////////////////////////////////-->
  <PropertyGroup>
    <BoostRoot Condition="'$(BoostDir)'!=''">$([System.IO.Path]::GetFullPath("$(BoostDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BoostRoot>
    <BoostRoot Condition="'$(BoostRoot)'==''">$([System.IO.Path]::GetFullPath("$(BOOST_BUILD_PATH)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BoostRoot>
    <OutputDir>$([System.IO.Path]::GetFullPath("$(OutDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</OutputDir>
    <BuildDir>$([System.IO.Path]::GetFullPath("$(IntDir)").TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BuildDir>
    <DummyFile Condition="'$(RebuildOnChanges)'=='false'">Dummy</DummyFile>
  </PropertyGroup>

  <ItemGroup Label="Dirs to clear">
    <BoostFolders Include="$(BuildDir)\boost" />
    <BoostFolders Include="$(OutputDir)\include" />
    <BoostFolders Include="$(OutputDir)\lib" />
    <BoostFolders Include="$(OutputDir)\bin" />
  </ItemGroup>

  <ItemGroup Label="Engine source files">
    <EngineSourceFiles Include="$(BoostRoot)\tools\build\src\engine\*.h" />
    <EngineSourceFiles Include="$(BoostRoot)\tools\build\src\engine\*.c" />
  </ItemGroup>

  <!--
  ///////////////////////////////////////////////////////////
  // Check for abnormal confitions before build
  ///////////////////////////////////////////////////////////-->
  <Target Name="SanityCheck" BeforeTargets="Build;Rebuild" >
    <Error Code="MSB8004" Condition="!HasTrailingSlash('$(IntDir)')" 
           Text="Intermediate Directory does not end with a trailing slash. Build requires trailing slash to allow proper evaluation of the Intermediate Directory." />
    <Error Code="MSB8004" Condition="!HasTrailingSlash('$(OutDir)')" 
           Text="Output Directory does not end with a trailing slash. Build requires trailing slash to allow proper evaluation of the Output Directory." />
    <Error Condition="'$(BoostRoot)'=='' or !Exists('$(BoostRoot)\Jamroot')" 
           Text="Boost library is missing. Did you set BOOST_ROOT environment variable?" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Get Configuration
  ///////////////////////////////////////////////////////////-->
  <Target Name="ConfigHelper" Returns="$(return-options)" >

    <PropertyGroup>
      <Quote Condition="'$(Context)'!='Project'">&#39;</Quote>
      <IncludedFilter> not(contains(@IncludeInCommandLine, 'false')) and contains(local-name(), 'Property')</IncludedFilter>
      <TypeFilter> and not(@Subtype = 'File') and  not(@Subtype = 'File') and not(@Subtype = 'Folder') and  not(@Subtype = 'folder')</TypeFilter>
      <PathFilter> and (@Subtype = 'File' or @Subtype = 'File' or @Subtype = 'Folder' or @Subtype = 'folder')</PathFilter>
      <TempFile>$([System.IO.Path]::GetTempFileName())</TempFile>
    </PropertyGroup>

    <XmlPeek Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/build/2009/properties'/&gt;"
             XmlInputPath="$(PropertyPageSchema)"
             Query="/ns:Rule/*[$(IncludedFilter)$(TypeFilter)]/@Name|
       /ns:ProjectSchemaDefinitions/ns:Rule/*[$(IncludedFilter)$(TypeFilter)]/@Name">
      <Output TaskParameter="Result" ItemName="Names" />
    </XmlPeek>

    <XmlPeek Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/build/2009/properties'/&gt;"
             XmlInputPath="$(PropertyPageSchema)" Query="/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(PathFilter)]/@Name|
                             /ns:ProjectSchemaDefinitions/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(PathFilter)]/@Name">
      <Output TaskParameter="Result" ItemName="Paths" />
    </XmlPeek>

    <ItemGroup Label="Outer Join">
      <data-name-map Include="$(%(Names.Identity))" Condition="'@(Names)'!='' And '%(Names.Identity)' !='' And '%(%(Names.Identity))'!=''" >
        <Name>%(Names.Identity)</Name>
      </data-name-map>
      <data-path-map Include="$(%(Paths.Identity))" Condition="'@(Paths)'!='' And '%(Paths.Identity)' !='' And '%(%(Paths.Identity))'!=''" >
        <Name>%(Paths.Identity)</Name>
      </data-path-map>
      
      <temp-data Condition="'@(data-name-map)'!='' And '%(data-name-map.Identity)'!=''"
                 Include="&lt;Property Name=&#34;%(data-name-map.Name)&#34;   &gt;%(data-name-map.Identity)&lt;/Property&gt;"/>
      <temp-data Condition="'@(data-path-map)'!='' And '%(data-path-map.Identity)'!=''"
                 Include="&lt;Property Name=&#34;%(data-path-map.Name)&#34;  &gt;$([System.IO.Path]::GetFullPath('%(data-path-map.Identity)'))&lt;/Property&gt;"/>
    </ItemGroup>

    <PropertyGroup Condition="'@(temp-data)'!=''">
      <raw-xsl>
        <!--?xml version="1.0" encoding="utf-8"?-->
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
                        xmlns:msb="http://schemas.microsoft.com/build/2009/properties" >
          <xsl:output method="text" indent="yes"/>
          <xsl:strip-space elements="*" />
          <xsl:param name="Quote" select="'&#34;'" />
          <xsl:param name="SmartQuote" select="'true'" />
          <xsl:param name="TrimDelimiters"  />
          <xsl:param name="DirectorySeparatorChar" select="'\'" />
          <xsl:variable name="Data" >@(temp-data, '')</xsl:variable>
          <xsl:template match="/">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:ProjectSchemaDefinitions">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:Rule">
            <xsl:variable name="DataSet" select="msxsl:node-set($Data)" />
            <xsl:apply-templates select="*[not(@IncludeInCommandLine ='false') and @Name = $DataSet/*/@Name]"  >
              <xsl:with-param name="DefaultSwitchPrefix" select="@SwitchPrefix" />
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringProperty|msb:DynamicEnumProperty|msb:IntProperty|msb:Argument|msb:EnumProperty" >
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:if test="local-name() != 'Argument'">
              <xsl:text>&#32;</xsl:text>
              <xsl:choose>
                <xsl:when test="@SwitchPrefix">
                  <xsl:value-of select="@SwitchPrefix"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$DefaultSwitchPrefix"/>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:value-of select="@Switch"/>
            </xsl:if>
            <xsl:variable name="PropertyName">
              <xsl:choose>
                <xsl:when test="local-name() = 'Argument'" >
                  <xsl:value-of  select="self::node()/@Property" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of  select="self::node()//@Name" />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="sQuote" >
              <xsl:if test="(@Separator != '' and contains($Value, @Separator)) or 
                    contains($Value, ' ') or 
                    $SmartQuote = 'false'">
                <xsl:value-of select="$Quote"/>
              </xsl:if>
            </xsl:variable>
            <xsl:value-of select="@Separator"/>
            <xsl:choose>
              <xsl:when test="local-name() = 'EnumProperty'">
                <xsl:variable name="EnumValName" select="$DataSet/*[@Name = $PropertyName]/text()"/>
                <xsl:variable name="EnumVal" select="self::node()/*[@Name = $EnumValName]" />
                <xsl:value-of select="$EnumVal/@Switch"/>
                <xsl:apply-templates select="$EnumVal/*" >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$sQuote" />
                <xsl:call-template name="Format" >
                  <xsl:with-param name="Value" select="$Value" />
                  <xsl:with-param name="Subtype" select="@Subtype" />
                </xsl:call-template>
                <xsl:value-of select="$sQuote" />
                <xsl:apply-templates >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
          <xsl:template match="msb:EnumValue">
            <xsl:param name="DataSet" />
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:BoolProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()/@Name" />
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:text>&#32;</xsl:text>
            <xsl:choose>
              <xsl:when test="@SwitchPrefix">
                <xsl:value-of select="@SwitchPrefix"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$DefaultSwitchPrefix"/>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="$Value = 'true'">
                <xsl:value-of select="@Switch"/>
              </xsl:when>
              <xsl:when test="$Value = 'false'">
                <xsl:value-of select="@ReverseSwitch"/>
              </xsl:when>
            </xsl:choose>
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringListProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()//@Name" />
            <xsl:variable name="Values"       select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="List"         select="self::node()" />
            <xsl:choose>
              <xsl:when test="@CommandLineValueSeparator != ''">
                <xsl:text>&#32;</xsl:text>
                <xsl:choose>
                  <xsl:when test="@SwitchPrefix">
                    <xsl:value-of select="@SwitchPrefix"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$DefaultSwitchPrefix"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select="@Switch" />
                <xsl:value-of select="@Separator" />
                <xsl:value-of select="$Quote"/>
                <xsl:for-each select="$Values">
                  <xsl:call-template name="Format" >
                    <xsl:with-param name="Value" select="self::node()" />
                    <xsl:with-param name="Subtype" select="@Subtype" />
                  </xsl:call-template>
                  <xsl:if test="position() != last()">
                    <xsl:value-of select="$List/@CommandLineValueSeparator"/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:value-of select="$Quote"/>
                <xsl:apply-templates>
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$Values">
                  <xsl:variable name="Value">
                    <xsl:call-template name="Format" >
                      <xsl:with-param name="Value" select="self::node()" />
                      <xsl:with-param name="Subtype" select="$List/@Subtype" />
                    </xsl:call-template>
                  </xsl:variable>
                  <xsl:variable name="sQuote" >
                    <xsl:if test="($List/@Separator != '' and contains($Value, $List/@Separator)) or contains($Value, ' ') or ($SmartQuote = 'false')">
                      <xsl:value-of select="$Quote"/>
                    </xsl:if>
                  </xsl:variable>
                  <xsl:text>&#32;</xsl:text>
                  <xsl:choose>
                    <xsl:when test="@SwitchPrefix">
                      <xsl:value-of select="@SwitchPrefix"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$DefaultSwitchPrefix"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:value-of select="$List/@Switch" />
                  <xsl:value-of select="$List/@Separator" />
                  <xsl:value-of select="$sQuote" />
                  <xsl:value-of select="$Value"/>
                  <xsl:value-of select="$sQuote" />
                  <xsl:apply-templates select="$List/*" >
                    <xsl:with-param name="DataSet" select="$DataSet" />
                  </xsl:apply-templates>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
          <xsl:template name="Format">
            <xsl:param name="Value" />
            <xsl:param name="Subtype" />
            <xsl:choose>
              <xsl:when test="contains(translate($Subtype, 'FOLDER', 'folder'), 'folder' ) and 
                     ($TrimDelimiters = 'true' or $TrimDelimiters = 'false') and string-length($Value) != 0" >
                <xsl:choose>
                  <xsl:when test="substring($Value, string-length($Value)) = $DirectorySeparatorChar">
                    <xsl:value-of select="substring($Value, 1, string-length($Value)-1)" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$Value"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$TrimDelimiters = 'false'">
                  <xsl:value-of select="$DirectorySeparatorChar"/>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$Value"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
        </xsl:stylesheet>
      </raw-xsl>
    </PropertyGroup>

    <ItemGroup>
      <xslParameters Condition="'$(Quote)'!=''"           Include="&lt;Parameter Name=&#34;Quote&#34; Value=&#34;$(Quote)&#34; /&gt;" />
      <xslParameters Condition="'$(SmartQuotes)'!=''"     Include="&lt;Parameter Name=&#34;SmartQuotes&#34; Value=&#34;$(SmartQuotes)&#34; /&gt;" />
      <xslParameters Condition="'$(TrimDelimiters)'!=''"  Include="&lt;Parameter Name=&#34;TrimDelimiters&#34; Value=&#34;$(TrimDelimiters)&#34; /&gt;" />
    </ItemGroup>

    <XslTransformation Condition="'@(temp-data)'!=''" Parameters="@(xslParameters, '')"
                       XmlInputPaths="$(PropertyPageSchema)" XslContent="$(raw-xsl)" OutputPaths="$(TempFile)" />

    <ReadLinesFromFile Condition="'@(temp-data)'!=''" File="$(TempFile)">
      <Output TaskParameter="Lines" PropertyName="options" />
    </ReadLinesFromFile>

    <PropertyGroup Condition="'$(options)'!=''">
      <return-options Condition="'$(Context)'=='Project'">$(options)</return-options>
      <return-options Condition="'$(Context)'!='Project'">$([System.IO.Path]::GetFileNameWithoutExtension($(PropertyPageSchema)))=&#34;$(options)&#34;</return-options>
    </PropertyGroup>
    
    <Delete Condition="'@(temp-data)'!=''" Files="$(TempFile)" />
  </Target>

  
  <!--
  ///////////////////////////////////////////////////////////
  // Prepare command line options for build command
  ///////////////////////////////////////////////////////////-->
  <Target Name="PrepareForBoostBuild" Returns="@(boost-options)" >
    <ItemGroup Label="Build Settings">
      <boost-options Condition="'$(PlatformToolset)'  ==''" Include="toolset=msvc" />
      <boost-options Condition="'$(PlatformToolset)'  !=''" Include="$([System.String]::Format('toolset=msvc-{0}.{1}', $(PlatformToolset.Substring(1, 2)), $(PlatformToolset.Substring(3,1))))" />
      <boost-options Condition="'$(BuildDir)'!=''"                                       Include="--build-dir=&#34;$(BuildDir)&#34;" />
      <boost-options Condition="'$(OutputDir)'!=''"                                      Include="--stagedir=&#34;$(OutputDir)&#34;" />
      <boost-options Condition="'$(OutputDir)'!='' And '$(BoostDeployment)'=='Install'"  Include="--prefix=&#34;$(OutputDir)&#34;" />
    </ItemGroup>
    
    <MSBuild Targets="ConfigHelper" Projects="$(MSBuildProjectFullPath)" BuildInParallel="true"
             Properties="PropertyPageSchema=%(PropertyPageSchema.Identity);Context=%(PropertyPageSchema.Context)" >
      <Output ItemName="boost-options" TaskParameter="TargetOutputs"/>
    </MSBuild>
    
    <ItemGroup Label="Build Settings">
      <boost-options Condition="'$(AdditionalOptions)'!=''" Include="$(AdditionalOptions)" />
    </ItemGroup>
  </Target>
  

  <!--
  ///////////////////////////////////////////////////////////
  // Build Jamfile Build Tool "B2.EXE"
  ///////////////////////////////////////////////////////////-->
  <Target Name="BuildJamTool" Label="Building BJAM engine"
          Inputs="@(EngineSourceFiles)" Outputs="$(BoostRoot)\b2.exe" >
    <Error ContinueOnError="false" Text="Engine source files are missing, did you update submodules?" Condition="@(EngineSourceFiles)==''" />
    
    <Message Text="Building Engine..." Importance="normal" />
    <Exec Command="call build.bat" WorkingDirectory="$(BoostRoot)\tools\build\src\engine\" EnvironmentVariables="VS_UNICODE_OUTPUT=" />
    
    <ItemGroup Label="List and copy all built exe files" >
      <BJamTools Include="$(BoostRoot)\tools\build\src\engine\bin.ntx86\*.exe" Condition="Exists('$(BoostRoot)\tools\build\src\engine\bin.ntx86')" />
      <BJamTools Include="$(BoostRoot)\tools\build\src\engine\bin.ntx86_64\*.exe" Condition="Exists('$(BoostRoot)\tools\build\src\engine\bin.ntx86_64')" />
    </ItemGroup>
    <Copy SourceFiles="@(BJamTools)" DestinationFolder="$(BoostRoot)\" UseHardlinksIfPossible="true" />
  </Target>

  
  <!--
  ///////////////////////////////////////////////////////////
  // Rebuild Boost Includes
  ///////////////////////////////////////////////////////////-->
  <Target Name="BoostHeaders"  Condition="!Exists('$(BoostRoot)\boost')" DependsOnTargets="BuildJamTool;" >
    <Exec Command="b2.exe toolset=msvc headers --build-dir=&#34;$(BuildDir)&#34; --stagedir=&#34;$(OutputDir)&#34;" WorkingDirectory="$(BoostRoot)\" EnvironmentVariables="VS_UNICODE_OUTPUT=" />
  </Target>

    
  <!--
  ///////////////////////////////////////////////////////////
  // BUILD TARGET
  /////////////////////////////////////////////////////////// -->
  <Target Name="Build" DependsOnTargets="PrepareForBoostBuild;BuildJamTool;BoostHeaders;" 
          Inputs="$(MSBuildProjectFullPath);" Outputs="@(BoostOutputs);$(DummyFile)" 
          Returns="@(BoostOutputs)" >
    
    <Exec Command="b2.exe @(boost-options, ' ')"  WorkingDirectory="$(BoostRoot)\"  EnvironmentVariables="NO_ZLIB=1;VS_UNICODE_OUTPUT=" />
    <ItemGroup>
      <BoostOutputs Include="$(OutputDir)\lib\*" />
    </ItemGroup>
    <Touch Files="@(BoostOutputs)" />
  </Target>
  

  <!--
  ///////////////////////////////////////////////////////////
  // REBUILD TARGET
  /////////////////////////////////////////////////////////// -->
  <Target Name="Rebuild" DependsOnTargets="Clean;Build;" Returns="@(BoostOutputs)" />


  <!--
  ///////////////////////////////////////////////////////////
  // CLEAN TARGET
  /////////////////////////////////////////////////////////// -->
  <Target Name="Clean" >
    <RemoveDir Directories="@(BoostFolders)"   ContinueOnError="true"  />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Integration with Visual Studio
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetNativeManifest" />


  <!--
  ///////////////////////////////////////////////////////////
  // During DesignTimeBuild in order for the IDE to determine 
  // if the project resolves correctly, this target will return 
  // a fullpath.
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetTargetPath" Returns="@(_TargetPath)" >
    <ItemGroup>
      <_TargetPath Include="$(BoostRoot)\Jamroot">
        <!--<ProjectType>StaticLibrary</ProjectType>
        <ProjectType Condition="'$(boost-link)'!=''">$(boost-link)</ProjectType>-->
        <Description>Boost Library</Description>
        <Name>Boost</Name>
        <Private>Never</Private>
        <FileType>info</FileType>
        <ResolveableAssembly>false</ResolveableAssembly>
      </_TargetPath>
    </ItemGroup>

  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // During Build it returns list of link libraries.
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetResolvedLinkLibs" Returns="@(LibFullPath)">
    <ItemGroup>
      <LibFullPath Include="$(OutputDir)\lib\*.lib">
        <ProjectType>StaticLibrary</ProjectType>
        <ProjectType Condition="'$(boost-link)'!=''">$(boost-link)</ProjectType>
        <FileType>lib</FileType>
        <ResolveableAssembly>false</ResolveableAssembly>
        <WindowsAppContainer Condition="'$(ConfigurationType)' == 'DynamicLibrary'">$(WindowsAppContainer)</WindowsAppContainer>
      </LibFullPath>
    </ItemGroup>
  </Target>
  

  
  <Target Name="GetCopyToOutputDirectoryItems" Returns="@(DLLToCopy)" >
    <ItemGroup>
      <DLLs Include="$(OutputDir)\lib\*.dll" />
      <DLLToCopy Condition="'@(DLLs)'!=''" Include="%(FullPath)" >
        <TargetPath>%(FileName).dll</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </DLLToCopy>
    </ItemGroup>
    <!--<Message Text="DLLToCopy: %(DLLToCopy.Identity) - %(DLLToCopy.TargetPath)" Importance="high" />-->
  </Target>

  
  
</Project>